import { RECEIVE_FORM_ERRORS, CLEAR_FORM_ERRORS } from "../actions/form_actions";

// SERIOUS
// I HAVE TO DEAL WITH DELETION ERRORS DIFFERENTLY.HOW DO I DEAL WITH DELETING OBJECTS WHEN THE DELETION SUCCEEDED
// BUT IT WAS ABORTED OR TIMED OUT ? MAYBE MAKE SURE THE OBJECT IS ALWAYS REMOVED FROM THE STORE NO MATTER IF IT FAILED OR NOT
// AND THEN DISPLAY THE ERROR ?
//  HOW DO I HANDLE DELETE REQUESTS WHEN IT COMES TO ERRORS AND FAILED / TIMED OUT REQUESTS
// I CAN MAYBE DO AN APP SUCCESS DELETION AND AN APP FAILED DELETION SINCE DELETIONS WILL ALWAYS
// REIDRECT WHETHER SUCCESSFUL OR NOT!!!
// MAYBE DO AN APP ERRORS/SUCCESSFUL NOTIFICATIONS
// MAKE FORM ERRORS SEPERATE

// SUCCESSFUL PROJECT CREATIONS SHOULD REDIRECT TO NEW PROJECT AND LET THE USER KNOW IT WAS SUCCESSFUL
// IN THE app SLICE
// WHERE IF DELETING AN OBJECT FAILS, DELETE THE OBJECT FROM THE STORE AND REDIRECT TO A NEW PATH AND PUT THE ERROR IN THE 
// app SLICE TOO

// MAYBE LIKE THIS
// const defaultState = { 
//     appNotifications: {
//         errors: [],
//         successful: []
//     }, 
//     formErrors: [] 
// };

function errorsReducer(state = {}, action) {
    Object.freeze(state);
    switch (action.type) {
        case RECEIVE_FORM_ERRORS:
            return action.formErrors;
        case CLEAR_FORM_ERRORS:
            return {};
        default:
            return state;
    }
}

export default errorsReducer;